// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /decks)
	PostDecks(ctx echo.Context, params PostDecksParams) error

	// (GET /decks/{id})
	GetDecksId(ctx echo.Context, id DeckId) error

	// (PUT /decks/{id}/draw)
	PutDecksIdDraw(ctx echo.Context, id DeckId, params PutDecksIdDrawParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostDecks converts echo context to params.
func (w *ServerInterfaceWrapper) PostDecks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDecksParams
	// ------------- Optional query parameter "shuffled" -------------

	err = runtime.BindQueryParameter("form", true, false, "shuffled", ctx.QueryParams(), &params.Shuffled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shuffled: %s", err))
	}

	// ------------- Optional query parameter "cards" -------------

	err = runtime.BindQueryParameter("form", false, false, "cards", ctx.QueryParams(), &params.Cards)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cards: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDecks(ctx, params)
	return err
}

// GetDecksId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDecksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id DeckId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDecksId(ctx, id)
	return err
}

// PutDecksIdDraw converts echo context to params.
func (w *ServerInterfaceWrapper) PutDecksIdDraw(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id DeckId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutDecksIdDrawParams
	// ------------- Required query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, true, "count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutDecksIdDraw(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/decks", wrapper.PostDecks)
	router.GET(baseURL+"/decks/:id", wrapper.GetDecksId)
	router.PUT(baseURL+"/decks/:id/draw", wrapper.PutDecksIdDraw)

}
